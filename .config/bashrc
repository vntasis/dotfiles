# Bash line editor
[[ $- == *i* ]] && source /home/vntasis/.local/share/blesh/ble.sh --noattach
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
#HISTFILESIZE=2000
HISTSIZE=HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\][\[\033[01;33m\]\u\[\033[01;32m\]@\[\033[01;36m\]\h\[\033[01;34m\] \w\[\033[01;31m\]]\[\033[00m\]\n '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -lhF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi




# _               _
#| |__   __ _ ___| |__  _ __ ___
#| '_ \ / _` / __| '_ \| '__/ __|
#| |_) | (_| \__ \ | | | | | (__
#|_.__/ \__,_|___/_| |_|_|  \___|


# Variables
export EDITOR=$(which vim)
export BROWSER=$(which qutebrowser)
export PATH=$PATH:$HOME/bin
export FZF_DEFAULT_OPTS="--cycle --preview='preview {}'"

# Alias
alias ncol="awk '{print NF; exit}'"
alias tmux="TERM=screen-256color-bce tmux"
alias vimwiki="vim ~/vimwiki/index.md"
alias config="git --git-dir=$HOME/projects/config/ \
    --work-tree=$HOME"
alias weather="curl -Ss wttr.in"
alias tron="ssh sshtron.zachlatta.com"
alias top="top -u vntasis"
alias rr="ranger"
alias dmenu="dmenu -fn 'Hack:14'"
alias R="docker run --name R-env --rm -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro r-env"
alias Rscript="docker run --rm r-env Rscript"
alias r="/home/vntasis/miniconda3/envs/r-env/lib/R/library/littler/bin/r"
alias cheat="cht.sh"
alias v="set -o vi"
alias e="set -o emacs"

# Functions

# Select an emoji and put it in the clipboard
emoji () {

    echo $(cat ~/.emojis | fzf --preview='' -e) | awk '{print $1}' | tr -d '\n' | xclip -selection clipboard

}

# Turn doi to bibtex reference

doi2bib () {
    curl -s "https://api.crossref.org/works/$1/transform/application/x-bibtex"
}

# Turn pdf to bibtex reference

pdf2bib () {

    doi=$(pdfinfo $1 | awk 'BEGIN{FS=":"}/doi/{print $NF}')
    [ -n "$doi" ] && doi2bib $doi;

    [ -z "$doi" ] && { \
        pdftotext $1; \
        doi=$(awk 'BEGIN{ IGNORECASE=1; regex="[1-9]{1}.+$"; }/doi.+\/.+[^.]$/{ exit; }END{ if (match($0,regex)) print substr($0,RSTART,RLENGTH); }' $(basename -s pdf "$1")txt); \
        rm $(basename -s pdf "$1")txt; \
        [ -n "$doi" ] && doi2bib $doi;
    }


    unset doi;
}

# Update the wikidates database

update_wikidates () {

    [ -d ~/.wikidates ] || mkdir ~/.wikidates
    for day in {1..365}; do
        date=$(LC_ALL=en_US.utf8 date -d "now +$day days" +%B_%d)
         w3m -dump "http://en.wikipedia.org/wiki/$date" | awk '/Events\[edit\]/,/Births\[edit\]/' | \
             tail -n +3 | head -n -2 | sed "s/^[ \t]*//"  | \
             tr -d '\n' | sed "s/•/\n•/g" \
             > ~/.wikidates/$date
    done

    w3m -dump "http://en.wikipedia.org/wiki/February_29" | awk '/Events\[edit\]/,/Births\[edit\]/' | \
        tail -n +3 | head -n -2 | sed "s/^[ \t]*//"  | \
        tr -d '\n' | sed "s/•/\n•/g" \
        > ~/.wikidates/February_29


}

cat ~/.wikidates/$(LC_ALL=en_US.utf8 date +%B_%d) | shuf -n 1

rcd() {
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"
}


# Run screenfetch on startup
[[ $(uptime -p | awk 'END{if (match($0,"[0-9]+.minutes")) print substr($0,RSTART,RLENGTH); }' \
    | awk '{print $1}') -lt 6 ]] && neofetch



# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/vntasis/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/vntasis/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/vntasis/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/vntasis/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# bash line editor
((_ble_bash)) && ble-attach
